diff --git a/teensy4/AudioStream.h b/teensy4/AudioStream.h
index 77f136e..d6f98da 100644
--- a/teensy4/AudioStream.h
+++ b/teensy4/AudioStream.h
@@ -34,6 +34,7 @@
 #ifndef __ASSEMBLER__
 #include <stdio.h>  // for NULL
 #include <string.h> // for memcpy
+#include "AudioSampleRate.h"
 
 #endif
 
@@ -55,57 +56,69 @@
 #endif
 
 #ifndef AUDIO_SAMPLE_RATE_EXACT
-#define AUDIO_SAMPLE_RATE_EXACT 44100.0f
+#define AUDIO_SAMPLE_RATE_EXACT AUDIO_SAMPLE_RATE_HZ_F
 #endif
 
 #define AUDIO_SAMPLE_RATE AUDIO_SAMPLE_RATE_EXACT
 
+#define noAUDIO_DEBUG_CLASS // disable this class by default
+
 #ifndef __ASSEMBLER__
 class AudioStream;
 class AudioConnection;
+#if defined(AUDIO_DEBUG_CLASS)
+class AudioDebug;  // for testing only, never for public release
+#endif // defined(AUDIO_DEBUG_CLASS)
+
+extern const unsigned AUDIO_SAMPLES_PER_BLOCK;
+extern const float    AUDIO_SAMPLE_RATE_HZ;
 
+constexpr size_t MAX_TRAVERSAL_BYTES=100;
+extern volatile int8_t    audio_traversal_array[MAX_TRAVERSAL_BYTES];
+
+// audio_block_struct stores control information, the actual
+// data buffer is allocated separately
 typedef struct audio_block_struct {
 	uint8_t  ref_count;
 	uint8_t  reserved1;
 	uint16_t memory_pool_index;
-	int16_t  data[AUDIO_BLOCK_SAMPLES];
+	int16_t *data;
 } audio_block_t;
 
 
+
 class AudioConnection
 {
 public:
-	AudioConnection(AudioStream &source, AudioStream &destination) :
-		src(source), dst(destination), src_index(0), dest_index(0),
-		next_dest(NULL)
-		{ isConnected = false;
-		  connect(); }
+	AudioConnection(AudioStream &source, AudioStream &destination);
 	AudioConnection(AudioStream &source, unsigned char sourceOutput,
-		AudioStream &destination, unsigned char destinationInput) :
-		src(source), dst(destination),
-		src_index(sourceOutput), dest_index(destinationInput),
-		next_dest(NULL)
-		{ isConnected = false;
-		  connect(); }
+		AudioStream &destination, unsigned char destinationInput);
 	friend class AudioStream;
-	~AudioConnection() {
-		disconnect();
-	}
-	void disconnect(void);
-	void connect(void);
+	~AudioConnection();
+	int disconnect(void);
+	int connect(void);
+	int connect(AudioStream &source, AudioStream &destination) {return connect(source,0,destination,0);};
+	int connect(AudioStream &source, unsigned char sourceOutput,
+		AudioStream &destination, unsigned char destinationInput);
 protected:
-	AudioStream &src;
-	AudioStream &dst;
+	AudioStream* src;	// can't use references as...
+	AudioStream* dst;	// ...they can't be re-assigned!
 	unsigned char src_index;
 	unsigned char dest_index;
-	AudioConnection *next_dest;
+	AudioConnection *next_dest; // linked list of connections from one source
 	bool isConnected;
+#if defined(AUDIO_DEBUG_CLASS)
+	friend class AudioDebug;
+#endif // defined(AUDIO_DEBUG_CLASS)
 };
 
-
+// Create the array of num audio_block_t for control.
+// Create a DMA 32-byte aligned contiguous block of memory of the required size.
+// Call the initialize_memory() function to finish setting up the audio buffer pool
 #define AudioMemory(num) ({ \
 	static DMAMEM audio_block_t data[num]; \
-	AudioStream::initialize_memory(data, num); \
+	DMAMEM __attribute__((aligned(32))) static int16_t dataBuffers[AUDIO_BLOCK_SAMPLES*num]; \
+	AudioStream::initialize_memory(data, num, dataBuffers); \
 })
 
 #define CYCLE_COUNTER_APPROX_PERCENT(n) (((float)((uint32_t)(n) * 6400u) * (float)(AUDIO_SAMPLE_RATE_EXACT / AUDIO_BLOCK_SAMPLES)) / (float)(F_CPU_ACTUAL))
@@ -141,7 +154,7 @@ public:
 			cpu_cycles_max = 0;
 			numConnections = 0;
 		}
-	static void initialize_memory(audio_block_t *data, unsigned int num);
+	static void initialize_memory(audio_block_t *data, unsigned int num, int16_t *dataBuffers=nullptr);
 	float processorUsage(void) { return CYCLE_COUNTER_APPROX_PERCENT(cpu_cycles); }
 	float processorUsageMax(void) { return CYCLE_COUNTER_APPROX_PERCENT(cpu_cycles_max); }
 	void processorUsageMaxReset(void) { cpu_cycles_max = cpu_cycles; }
@@ -152,6 +165,11 @@ public:
 	static uint16_t cpu_cycles_total_max;
 	static uint16_t memory_used;
 	static uint16_t memory_used_max;
+
+    void setId(int identifier) { id = identifier; }
+	static void setOrderedUpdate(bool orderedUpdate);
+	static constexpr int UPDATE_STEP_OBJECT_ID = 1024;
+	static bool use_ordered_update;
 protected:
 	bool active;
 	unsigned char num_inputs;
@@ -165,18 +183,55 @@ protected:
 	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
 	friend void software_isr(void);
 	friend class AudioConnection;
+#if defined(AUDIO_DEBUG_CLASS)
+	friend class AudioDebug;
+#endif // defined(AUDIO_DEBUG_CLASS)
 	uint8_t numConnections;
 private:
+	static AudioConnection* unused; // linked list of unused but not destructed connections
 	AudioConnection *destination_list;
 	audio_block_t **inputQueue;
 	static bool update_scheduled;
 	virtual void update(void) = 0;
+	virtual void updateIndex(int index) {}
 	static AudioStream *first_update; // for update_all
 	AudioStream *next_update; // for update_all
 	static audio_block_t *memory_pool;
 	static uint32_t memory_pool_available_mask[];
 	static uint16_t memory_pool_first_mask;
+	static AudioStream* step_update_object;
+	static AudioStream** ordered_update_array;
+	int id = -1;
 };
 
-#endif
-#endif
+#if defined(AUDIO_DEBUG_CLASS)
+// This class aids debugging of the internal functionality of the
+// AudioStream and AudioConnection classes, but is NOT intended
+// for general users of the Audio library.
+class AudioDebug
+{
+	public:
+		// info on connections
+		AudioStream* getSrc(AudioConnection& c) { return c.src;};
+		AudioStream* getDst(AudioConnection& c) { return c.dst;};
+		unsigned char getSrcN(AudioConnection& c) { return c.src_index;};
+		unsigned char getDstN(AudioConnection& c) { return c.dest_index;};
+		AudioConnection* getNext(AudioConnection& c) { return c.next_dest;};
+		bool isConnected(AudioConnection& c) { return c.isConnected;};
+		AudioConnection* unusedList() { return AudioStream::unused;};
+
+		// info on streams
+		AudioConnection* dstList(AudioStream& s) { return s.destination_list;};
+		audio_block_t ** inqList(AudioStream& s) { return s.inputQueue;};
+		uint8_t 	 	 getNumInputs(AudioStream& s) { return s.num_inputs;};
+		AudioStream*     firstUpdate(AudioStream& s) { return s.first_update;};
+		AudioStream* 	 nextUpdate(AudioStream& s) { return s.next_update;};
+		uint8_t 	 	 getNumConnections(AudioStream& s) { return s.numConnections;};
+		bool 	 	 	 isActive(AudioStream& s) { return s.active;};
+
+
+};
+#endif // defined(AUDIO_DEBUG_CLASS)
+
+#endif // __ASSEMBLER__
+#endif // AudioStream_h
