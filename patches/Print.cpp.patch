diff --git a/teensy4/Print.cpp b/teensy4/Print.cpp
index 9a63c46..459c6d6 100644
--- a/teensy4/Print.cpp
+++ b/teensy4/Print.cpp
@@ -41,9 +41,12 @@
 
 size_t Print::write(const uint8_t *buffer, size_t size)
 {
-	if (buffer == nullptr) return 0;
 	size_t count = 0;
-	while (size--) count += write(*buffer++);
+	while (size--) {
+		char val = (char)*buffer;
+		count += write(*buffer++);
+		if (val == '\n') { write('\r'); } // add carriage return to all newlines
+	}
 	return count;
 }
 
@@ -92,7 +95,23 @@ extern "C" {
 __attribute__((weak))
 int _write(int file, char *ptr, int len)
 {
-	((class Print *)file)->write((uint8_t *)ptr, len);
+	int bytesRemaining = len;
+	uint8_t buf[256];
+	size_t count = 0;
+	size_t idx = 0;
+
+	// replace all new lines with newline and carriage return
+	while(bytesRemaining-- > 0) {
+		if (count == 256) {
+			((class Print *)file)->write((uint8_t *)buf, count);
+			count = 0;
+		}
+		uint8_t next = ptr[idx++];
+		buf[count++] = next;
+		if (next == '\n') { buf[count++] = '\r'; }
+	}
+	if (count > 0) { ((class Print *)file)->write((uint8_t *)buf, count); }
+
 	return len;
 }
 }
@@ -125,6 +144,12 @@ int Print::printf(const __FlashStringHelper *format, ...)
 #endif
 }
 
+int Print::vprintf( const char * format, va_list arg )
+{
+	int retval = vdprintf((int)this, format, arg);
+	return retval;
+}
+
 size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
 {
 	uint8_t buf[34];
@@ -186,7 +211,7 @@ size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
 	return write(buf + i, sizeof(buf) - i);
 }
 
-size_t Print::printFloat(double number, uint8_t digits) 
+size_t Print::printFloat(double number, uint8_t digits)
 {
 	uint8_t sign=0;
 	size_t count=0;
@@ -195,7 +220,7 @@ size_t Print::printFloat(double number, uint8_t digits)
     	if (isinf(number)) return print("inf");
     	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
     	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
-	
+
 	// Handle negative numbers
 	if (number < 0.0) {
 		sign = 1;
@@ -226,7 +251,7 @@ size_t Print::printFloat(double number, uint8_t digits)
 			remainder *= 10.0;
 			n = (uint8_t)(remainder);
 			buf[count++] = '0' + n;
-			remainder -= n; 
+			remainder -= n;
 		}
 		count += write(buf, count);
 	}
